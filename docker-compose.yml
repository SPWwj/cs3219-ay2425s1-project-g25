version: "3.9"

services:
    # User Service
    user-service:
        build: ./backend/user-service
        container_name: user-service-container
        working_dir: /usr/src/app
        volumes:
            - ./backend/user-service/:/usr/src/app
            - /usr/src/app/node_modules
        ports:
            - "3001:3001"
        depends_on:
            - peerprep-redis
        env_file:
            - ./backend/user-service/.env 
        environment:
            REDIS_HOST: peerprep-redis # Override localhost
            DB_HOST: peerprep-mongodb
        networks:
            - peerprep-network

    # Question Service
    question-service:
        build: 
            context: ./backend/question-service
            target: dev
        container_name: question-service
        ports:
            - "3002:3002"
        volumes:
            - ./backend/question-service:/app
            - /app/node_modules
        env_file:
            - ./backend/question-service/.env
        environment:
            DB_HOST: peerprep-mongodb # Override localhost
        depends_on:
            - peerprep-mongodb
            - peerprep-kafka
        networks:
            - peerprep-network

    # Matching Service
    matching-service:
        build: 
            context: ./backend/matching-service
            target: dev
        container_name: matching-service
        ports:
            - "3003:3003"
        volumes:
            - ./backend/matching-service:/app
            - /app/node_modules
        env_file:
            - ./backend/matching-service/.env
        environment:
            DB_HOST: peerprep-mongodb # Override localhost
            REDIS_HOST: peerprep-redis # Override localhost
        depends_on:
            - peerprep-mongodb
            - peerprep-redis
            - peerprep-kafka
        networks:
            - peerprep-network

    # Collaboration Service
    collaboration-service:
        build: 
            context: ./backend/collaboration-service
            target: dev
        container_name: collaboration-service
        ports:
            - "3004:3004"
        volumes:
            - ./backend/matching-service:/app
            - /app/node_modules
        env_file:
            - ./backend/matching-service/.env
        environment:
            DB_HOST: peerprep-mongodb # Override localhost
            REDIS_HOST: peerprep-redis # Override localhost
            KAFKA_HOST: peerprep-kafka # Override localhost
        depends_on:
            - peerprep-mongodb
            - peerprep-redis
            - peerprep-kafka
        networks:
            - peerprep-network

    # Database Service
    peerprep-mongodb:
        image: mongo:latest
        restart: always
        ports:
            - '27017:27017'
        container_name: peerprep-mongo-container
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: password
        volumes:
            - ./data/db:/data/db
            - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
        networks:
            - peerprep-network

    # Frontend Service
    frontend:
        build: ./frontend
        container_name: frontend
        ports:
            - "3000:3000"
        volumes:
            - ./frontend:/app
            - /app/node_modules
        env_file:
            - ./frontend/.env
        depends_on:
            - nginx
        networks:
            - peerprep-network
        environment:
            - CHOKIDAR_USEPOLLING=true
            - WATCHPACK_POLLING=true
            - WDS_SOCKET_PORT=0

    # Nginx API Gateway
    nginx:
        build: ./backend/api-gateway
        ports:
            - "80:80"
        volumes:
            - ./backend/api-gateway/nginx.conf:/etc/nginx/nginx.conf
        networks:
            - peerprep-network
    
    # Redis Service
    peerprep-redis:
        image: redis:latest
        restart: always
        container_name: peerprep-redis-container
        ports:
            - "6379:6379"
        networks:
            - peerprep-network

    # Kafka
    peerprep-kafka:
        image: apache/kafka:3.8.0
        container_name: kafka
        environment:
            KAFKA_ENABLE_KRAFT: "yes"
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: "broker,controller"
            KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
            KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
            KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
            KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
            KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        ports:
            - "9092:9092"
            - "9093:9093" # Controller port
        volumes:
            - ./kafka-data:/var/lib/kafka/data
        networks:
            - peerprep-network

networks:
    peerprep-network:
        driver: bridge
